webpackJsonp([0x5c9025a06fb1],{460:function(n,s){n.exports={data:{markdownRemark:{html:'<p>Web development is full of stupid acronyms. AJAX is one of the worst offenders of this because it actually means something different than what it does. It stands for "asynchronous JavaScript and XML" which is not what it does. However it morphed and evolved and now it\'s the term that we use to represent what you do when a website requests more information from a server after the page has loaded.</p>\n<p>We\'re going to use AJAX to request data from an API (lol acronyms.) An API is application programming interface, but what we mean we say API in this context is it\'s a public server that will allow us to make AJAX calls and it will respond. Most big websites will have some sort of public API, like Twitter for example. There are many <a href="https://github.com/toddmotto/public-apis">public APIs</a>.</p>\n<p>The API we\'re going to use is <a href="https://dog.ceo/dog-api/">dog.ceo</a>. It\'s a simple, silly API that will give you back random pictures of dogs. Awesome. Make a new project in your favorite editor, add an index.html with the following:</p>\n<div class="gatsby-highlight">\n      <pre class="language-htm"><code class="language-htm">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n\n&lt;head&gt;\n  &lt;title&gt;Dogs&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;h1&gt;Doggos&lt;/h1&gt;\n  &lt;div class=&quot;doggos&quot;&gt;\n  &lt;/div&gt;\n\n  &lt;script src=&quot;./doggos.js&quot;&gt;&lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;</code></pre>\n      </div>\n<p>Make a new file called <code class="language-text">doggos.js</code> and put the following:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token constant">DOG_URL</span> <span class="token operator">=</span> <span class="token string">"https://dog.ceo/api/breeds/image/random"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token constant">DOG_URL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\npromise\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> processingPromise <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> processingPromise<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>processedResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>breeds<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"this will log first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>We\'re using a browser function here called <code class="language-text">fetch</code>. <code class="language-text">fetch</code> is the new way of doing AJAX and it is so much easier than the old one. Never use the old one. What <code class="language-text">fetch</code> returns is called a <strong>promise</strong> and it\'s similar to a callback that we used before. A promise, like callbacks, allows you to deal with things that don\'t happen immediately, things that are asynchronous. In this case, we\'re waiting for the API to respond with the information we asked for. It takes to request more information over the Internet and we don\'t want to hold up the rest of our code.</p>\n<p>With a promise, it\'s an object that represents the future answer to whatever you asked. That\'s sort of weird, but it ends up being convenient. So, we have this promise, and with it we call the <code class="language-text">then</code> method on it and give it a function to run once that asynchronous action (the API request) finishes.</p>\n<p>The response will look something like:</p>\n<div class="gatsby-highlight">\n      <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"status"</span><span class="token operator">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span>\n  <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"https://images.dog.ceo/breeds/affenpinscher/n02110627_11783.jpg"</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>If that looks like JavaScript it\'s because it\'s technically valid JavaScript! It makes it really easy to use with JavaScript. Once it finishes, it gives you back an unuseful blob of stuff though. We know this blob is actually given to us in a special format called <strong>JSON</strong> (lol more acronyms.) JSON stands for JavaScript Object Notation, and it\'s a very common way to exchange data over the Internet because it\'s machine readable but also pretty readable to humans. Because we know this response will be in JSON (we know that because the <a href="https://dog.ceo/dog-api/documentation/random">documentation</a> say so) we can say process this blob into a JavaScript object we can use.</p>\n<p>However processing this into JSON is not always trivial. If you have a lot stuff to process, it can take a lot of time and computer processing to do so. As such, this made asynchronous as well and it returns a promise. That\'s why we do the <code class="language-text">return processingPromise;</code> line. This is called <strong>promise chaining</strong>. The next <code class="language-text">then</code> will be called once this processing is finished.</p>\n<p>Once finished, it\'s a normal JavaScript we can access normally. So try (inside of the function with <code class="language-text">processedResponse</code>): <code class="language-text">console.log(processedResponse.status)</code>. It should log out <code class="language-text">&quot;success&quot;</code>. Cool, right?</p>\n<p>So now what I want to do make an image on the page of a random doggo. This API happens to do just that! So, let\'s make it happen. Make you file say:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token constant">DOG_URL</span> <span class="token operator">=</span> <span class="token string">"https://dog.ceo/api/breeds/image/random"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token constant">DOG_URL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> doggos <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".doggos"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\npromise\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> processingPromise <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> processingPromise<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>processedResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    img<span class="token punctuation">.</span>src <span class="token operator">=</span> processedResponse<span class="token punctuation">.</span>message<span class="token punctuation">;</span>\n    img<span class="token punctuation">.</span>alt <span class="token operator">=</span> <span class="token string">"Cute doggo"</span><span class="token punctuation">;</span>\n    doggos<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Here we create an <code class="language-text">&lt;img /&gt;</code> tag and append it into the DOM via <code class="language-text">appendChild</code>. Wouldn\'t it be cool if we could do it multiple times? Let\'s do it!!</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token constant">DOG_URL</span> <span class="token operator">=</span> <span class="token string">"https://dog.ceo/api/breeds/image/random"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> doggos <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".doggos"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">addNewDoggo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token constant">DOG_URL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  promise\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> processingPromise <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> processingPromise<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>processedResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      img<span class="token punctuation">.</span>src <span class="token operator">=</span> processedResponse<span class="token punctuation">.</span>message<span class="token punctuation">;</span>\n      img<span class="token punctuation">.</span>alt <span class="token operator">=</span> <span class="token string">"Cute doggo"</span><span class="token punctuation">;</span>\n      doggos<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\ndocument<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".add-doggo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> addNewDoggo<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Now you can add as many doggos as you want! Here\'s my example:</p>\n<!-- locally you\'ll need to do /doggos.html without /intro-to-web-dev-v2/ -->\n<iframe class="doggos" height="595" title="Doggos" src="/intro-to-web-dev-v2/doggos.html" frameborder="no" allowtransparency="true"></iframe>\n<p>For your extra-credit project, here are some cool ways to expand this project:</p>\n<ol>\n<li>Add this to your GitHub in its own repo (we\'ll learn how to do that later)</li>\n<li>Style it nice using CSS.</li>\n<li>Show a loading gif (just use an <code class="language-text">&lt;img /&gt;</code>) that shows when you\'re loading a new doggo and then hide it when you\'re done.</li>\n<li>The dog.ceo API allows you to <a href="https://dog.ceo/dog-api/documentation/">request a list of breeds</a>. Use this list to populate a <code class="language-text">&lt;select&gt;&lt;/select&gt;</code>. Then when a user select a dog breed, show a picture of that dog using the the <a href="https://dog.ceo/dog-api/documentation/breed">random image by breed</a> API.</li>\n</ol>',frontmatter:{path:"/ajax",title:"AJAX",order:16}},allMarkdownRemark:{edges:[{node:{frontmatter:{order:0,path:"/intro",title:"Introduction to the Course"}}},{node:{frontmatter:{order:1,path:"/overview",title:"Introduction to JavaScript?"}}},{node:{frontmatter:{order:2,path:"/tools",title:"Systems"}}},{node:{frontmatter:{order:3,path:"/variable",title:"What is Variable"}}},{node:{frontmatter:{order:4,path:"/html-next-steps",title:"HTML Next Steps"}}},{node:{frontmatter:{order:5,path:"/meta-html",title:"Meta HTML"}}},{node:{frontmatter:{order:6,path:"/basic-css",title:"Basic CSS"}}},{node:{frontmatter:{order:7,path:"/selectors",title:"CSS Selectors and the Cascade"}}},{node:{frontmatter:{order:8,path:"/layout-css",title:"Layout CSS"}}},{node:{frontmatter:{order:9,path:"/css-patterns",title:"Effective Patterns for Writing CSS"}}},{node:{frontmatter:{order:10,path:"/project-html-css",title:"Project: HTML & CSS"}}},{node:{frontmatter:{order:11,path:"/programming-fundamentals",title:"Programming Fundamentals"}}},{node:{frontmatter:{order:12,path:"/functions-and-scope",title:"Functions and Scope"}}},{node:{frontmatter:{order:13,path:"/objects-and-arrays",title:"Objects and Arrays"}}},{node:{frontmatter:{order:14,path:"/dom",title:"The DOM"}}},{node:{frontmatter:{order:15,path:"/js-project",title:"JavaScript, HTML, and CSS Project"}}},{node:{frontmatter:{order:16,path:"/ajax",title:"AJAX"}}},{node:{frontmatter:{order:17,path:"/libraries",title:"Integrating with Other People's Libraries"}}},{node:{frontmatter:{order:18,path:"/git-and-bash",title:"Git and Bash"}}},{node:{frontmatter:{order:19,path:"/node",title:"Node.js"}}},{node:{frontmatter:{order:20,path:"/deploying",title:"Deploying Your App"}}},{node:{frontmatter:{order:21,path:"/final-thoughts",title:"Final Thoughts"}}}]}},pathContext:{}}}});
//# sourceMappingURL=path---ajax-6032a27ea8eb20028d68.js.map